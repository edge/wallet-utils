/// <reference types="node" />
import elliptic from 'elliptic';
export declare type Address = string;
export declare type ChecksumAddress = Address;
export declare type Message = string;
export declare type PrivateKey = Uint8Array | Buffer | string | number[] | elliptic.ec.KeyPair;
export declare type PublicKey = string;
export declare type Signature = string;
export declare type Wallet = {
    address: Address;
    privateKey: PrivateKey;
    publicKey: PublicKey;
};
export declare function generateKeyPair(): elliptic.ec.KeyPair;
export declare function generateWallet(): Wallet;
export declare function generateChecksumAddress(address: Address): ChecksumAddress;
export declare function checksumAddressIsValid(address: Address): boolean;
export declare function restoreWalletFromPrivateKey(privateKey: PrivateKey): Wallet;
export declare function publicKeyToChecksumAddress(publicKey: PublicKey): ChecksumAddress;
export declare function privateKeyToPublicKey(privateKey: PrivateKey): PublicKey;
export declare function privateKeyToChecksumAddress(privateKey: PrivateKey): ChecksumAddress;
export declare function xeStringFromMicroXe(mxe: number, format: boolean): string;
export declare function toMicroXe(xe: string | number): number;
export declare function formatXe(xe: string | number, format: boolean): string;
export declare function generateSignature(privateKey: string, msg: Message): Signature;
export declare function verifySignatureAddress(msg: string, signature: Signature, address: Address): boolean;
export declare function recoverPublicKeyFromSignedMessage(msg: Message, signature: Signature): PublicKey;
export declare function recoverAddressFromSignedMessage(msg: Message, signature: Signature): Address;
declare const _default: {
    generateKeyPair: typeof generateKeyPair;
    generateWallet: typeof generateWallet;
    generateChecksumAddress: typeof generateChecksumAddress;
    checksumAddressIsValid: typeof checksumAddressIsValid;
    restoreWalletFromPrivateKey: typeof restoreWalletFromPrivateKey;
    publicKeyToChecksumAddress: typeof publicKeyToChecksumAddress;
    privateKeyToChecksumAddress: typeof privateKeyToChecksumAddress;
    privateKeyToPublicKey: typeof privateKeyToPublicKey;
    generateSignature: typeof generateSignature;
    verifySignatureAddress: typeof verifySignatureAddress;
    recoverPublicKeyFromSignedMessage: typeof recoverPublicKeyFromSignedMessage;
    recoverAddressFromSignedMessage: typeof recoverAddressFromSignedMessage;
    xeStringFromMicroXe: typeof xeStringFromMicroXe;
    toMicroXe: typeof toMicroXe;
    formatXe: typeof formatXe;
};
export default _default;
